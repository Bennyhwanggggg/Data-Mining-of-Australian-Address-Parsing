'''
Created by Daniel Hocking
Test cases for COMP9318 Project questions 1 and 2
Note: If you run this and get no output then the test cases have passed
'''

from submission import viterbi_algorithm, top_k_viterbi, advanced_decoding
import numpy as np

def check_paths_match(paths_a, paths_b):
    if len(paths_a) != len(paths_b):
        print('Result not the same length as expected')
        return
    for i in range(len(paths_a)):
        if not np.alltrue(np.equal(paths_a[i][:-1:], paths_b[i][:-1:])):
            print(f'Path not equal: {paths_a[i]} : {paths_b[i]}')
            return
        if not np.isclose(paths_a[i][-1], paths_b[i][-1]):
            print(f'Probability not equal: {paths_a[i][-1]} : {paths_b[i][-1]}')
            return
    return True

def check_labels_match(paths, labels_file):
    right = wrong = 0
    with open(labels_file) as f:
        lines = f.readlines()
        if len(lines) != len(paths):
            print('Result not the same length as expected')
            return
        for i in range(len(lines)):
            correct_labels = list(map(int, lines[i].split()))
            if len(correct_labels) != (len(paths[i]) - 1):
                print(f'Line {i + 1} of result not the same length as expected')
                return
            for j in range(len(correct_labels)):
                if correct_labels[j] == paths[i][j]:
                    right += 1
                else:
                    wrong += 1
    return right, wrong

def check_margin(right, wrong):
    if wrong < 120:
        return True
    else:
        print(f'({right}, {wrong})')
        return False

# The basic test provided
def test_1():
    '''
    >>> State_File ='./toy_example/State_File'
    >>> Symbol_File='./toy_example/Symbol_File'
    >>> Query_File ='./toy_example/Query_File'
    >>> viterbi_result = viterbi_algorithm(State_File, Symbol_File, Query_File)
    >>> check_paths_match(viterbi_result, [[3, 0, 0, 1, 2, 4, -9.843403], [3, 2, 1, 2, 4, -9.397116]])
    True
    '''
    pass

# More advanced set
def test_2():
    '''
    >>> State_File ='./dev_set/State_File'
    >>> Symbol_File='./dev_set/Symbol_File'
    >>> Query_File ='./dev_set/Query_File'
    >>> viterbi_result = viterbi_algorithm(State_File, Symbol_File, Query_File)
    >>> check_paths_match(viterbi_result, [[24, 0, 1, 2, 3, 18, 4, 18, 5, 6, 25, -58.407178051467], [24, 2, 3, 18, 4, 18, 5, 6, 25, -39.754151979072745], [24, 8, 9, 18, 4, 18, 5, 6, 25, -52.434767466887855], [24, 16, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -76.94428109077145], [24, 8, 8, 8, 9, 19, 1, 20, 1, 19, 1, 2, 18, 4, 18, 5, 6, 25, -138.52973619808222], [24, 0, 19, 2, 3, 18, 4, 18, 5, 6, 25, -57.933602617797774], [24, 0, 19, 1, 2, 2, 3, 18, 4, 18, 5, 6, 25, -67.23603253597994], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -55.29652777494088], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -67.16051205107227], [24, 8, 8, 9, 18, 2, 3, 4, 18, 4, 18, 5, 6, 25, -86.18266981585235], [24, 1, 2, 3, 18, 4, 18, 5, 6, 25, -41.4564619663574], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -66.34472246856906], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -58.89034807054728], [24, 8, 9, 18, 4, 18, 5, 6, 25, -49.14004393438609], [24, 0, 18, 1, 20, 1, 2, 3, 18, 4, 18, 5, 6, 25, -68.186353239099], [24, 8, 9, 15, 9, 18, 1, 20, 1, 2, 3, 18, 4, 18, 5, 6, 25, -97.73059571252817], [24, 0, 18, 4, 4, 18, 2, 3, 18, 4, 18, 5, 6, 25, -80.04925807202758], [24, 0, 19, 1, 2, 2, 3, 18, 4, 4, 18, 5, 6, 25, -83.99455458864036], [24, 0, 1, 2, 3, 18, 4, 18, 5, 6, 25, -61.07773654305999], [24, 1, 2, 2, 3, 18, 4, 18, 5, 6, 25, -58.339645642258155], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -55.007833199284136], [24, 8, 9, 18, 4, 18, 5, 6, 25, -51.32683245956923], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -66.72901286917302], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -60.04747713376548], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -54.01241453115328], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -63.742526375138006], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -56.368526026271006], [24, 0, 19, 1, 18, 4, 18, 5, 6, 25, -53.6343020429981], [24, 16, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -79.91942625196758], [24, 2, 3, 18, 4, 18, 5, 6, 25, -42.6094010353643], [24, 2, 3, 18, 4, 18, 5, 6, 25, -40.142775587458786], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -55.86786604191135], [24, 0, 19, 1, 2, 2, 3, 18, 4, 18, 5, 6, 25, -66.52089664682067], [24, 8, 8, 9, 18, 4, 18, 5, 6, 25, -56.426409954381135], [24, 16, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -67.20645744850664], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -59.734255091117745], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -59.660708009813646], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -58.58691230104886], [24, 8, 9, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -68.4581050631668], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -60.469233711801564], [24, 0, 19, 1, 20, 1, 2, 3, 18, 4, 18, 5, 6, 25, -73.3653081056723], [24, 2, 3, 18, 4, 18, 5, 6, 25, -45.10756137449559], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -65.03576798447783], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -68.27271208901884], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -60.08642575641911], [24, 8, 8, 9, 18, 4, 18, 5, 6, 25, -54.962045513474024], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -52.55355100588994], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -59.4453337192611], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -50.56965642171899], [24, 0, 1, 2, 2, 2, 3, 18, 4, 4, 18, 5, 6, 25, -73.92187884497085], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -70.94827027995954], [24, 16, 0, 19, 1, 1, 2, 3, 18, 4, 18, 5, 6, 25, -75.45459331131069], [24, 0, 18, 8, 9, 18, 2, 2, 3, 18, 4, 18, 5, 6, 25, -79.55782082236264], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -60.24167993282755], [24, 0, 19, 1, 2, 18, 4, 18, 5, 6, 25, -63.206213499342965], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -58.61847068751436], [24, 0, 19, 2, 3, 18, 4, 18, 5, 6, 25, -69.06528910789815], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -65.91641292105788], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -50.320993150434084], [24, 2, 3, 18, 4, 18, 5, 6, 25, -42.09602663600471], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -57.099466774787025], [24, 0, 1, 2, 3, 18, 4, 18, 5, 6, 25, -46.16609346609039], [24, 1, 2, 3, 18, 1, 2, 18, 4, 18, 5, 6, 25, -72.14212691254828], [24, 8, 8, 9, 18, 4, 18, 5, 6, 25, -55.43504994195047], [24, 1, 2, 3, 18, 1, 20, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -90.31990749732773], [24, 1, 2, 2, 3, 18, 4, 18, 5, 6, 25, -57.58994915035009], [24, 1, 2, 2, 2, 2, 2, 3, 18, 4, 18, 5, 6, 25, -87.38913040942698], [24, 8, 8, 9, 18, 4, 18, 5, 6, 25, -52.719237418638855], [24, 1, 2, 20, 2, 2, 3, 18, 4, 18, 5, 6, 25, -75.17549923581448], [24, 0, 1, 2, 3, 18, 4, 18, 5, 6, 25, -51.75431461630585], [24, 2, 3, 18, 4, 18, 5, 6, 25, -41.6699207687882], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -56.68858910993885], [24, 1, 2, 3, 18, 4, 18, 5, 6, 25, -49.561123494508934], [24, 1, 2, 2, 3, 18, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -93.08913381658303], [24, 16, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -61.27281244521978], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -51.50002775099704], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -52.50741511366613], [24, 2, 3, 18, 4, 18, 5, 6, 25, -44.543155752099665], [24, 8, 8, 9, 18, 4, 18, 5, 6, 25, -54.962045513474024], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -55.04819253478041], [24, 0, 19, 1, 20, 1, 2, 2, 20, 2, 3, 18, 4, 18, 5, 6, 25, -119.20619562871903], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -50.85324603329972], [24, 0, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -58.93493056527702], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -65.7419611085753], [24, 2, 3, 18, 4, 18, 5, 6, 25, -45.50406775316821], [24, 0, 1, 2, 3, 18, 4, 4, 4, 4, 4, 18, 5, 6, 25, -85.6096721148282], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -60.06108440267953], [24, 2, 3, 18, 4, 18, 5, 6, 25, -38.86472829113796], [24, 0, 19, 1, 18, 4, 4, 18, 5, 6, 25, -56.99022955932032], [24, 0, 19, 1, 20, 1, 2, 3, 18, 4, 18, 5, 6, 25, -72.6346652661331], [24, 0, 1, 2, 2, 2, 3, 18, 4, 18, 5, 6, 25, -74.45664744025565], [24, 2, 3, 18, 4, 18, 5, 6, 25, -44.45122388315245], [24, 8, 9, 1, 2, 3, 18, 4, 18, 5, 6, 25, -55.3461010010974], [24, 0, 19, 1, 2, 3, 18, 4, 18, 5, 6, 25, -54.785517122444126], [24, 2, 3, 18, 4, 18, 5, 6, 25, -49.545420061233415], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -63.913879689451385], [24, 2, 3, 18, 4, 4, 18, 5, 6, 25, -48.018279615695306], [24, 8, 8, 9, 19, 1, 18, 4, 4, 18, 5, 6, 25, -93.23348468803701], [24, 2, 3, 18, 4, 18, 5, 6, 25, -42.796017552066], [24, 0, 19, 1, 2, 3, 18, 4, 4, 18, 5, 6, 25, -63.61774196995776]])
    True
    '''
    pass

# The basic test for part 2
def test_3():
    '''
    >>> State_File ='./toy_example/State_File'
    >>> Symbol_File='./toy_example/Symbol_File'
    >>> Query_File ='./toy_example/Query_File'
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 1)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403], [3, 2, 1, 2, 4, -9.397116]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 2)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 3)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 4)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 5)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 0, 2, 1, 2, 4, -10.536550562307884], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728], [3, 1, 2, 1, 4, -9.907941902885508]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 6)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 0, 2, 1, 2, 4, -10.536550562307884], [3, 0, 0, 0, 1, 4, -10.641911077965709], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728], [3, 1, 2, 1, 4, -9.907941902885508], [3, 1, 1, 2, 4, -9.956732067054942]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 7)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 0, 2, 1, 2, 4, -10.536550562307884], [3, 0, 0, 0, 1, 4, -10.641911077965709], [3, 0, 0, 1, 1, 4, -10.913844793449352], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728], [3, 1, 2, 1, 4, -9.907941902885508], [3, 1, 1, 2, 4, -9.956732067054942], [3, 0, 0, 1, 4, -10.062092582712767]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 8)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 0, 2, 1, 2, 4, -10.536550562307884], [3, 0, 0, 0, 1, 4, -10.641911077965709], [3, 0, 0, 1, 1, 4, -10.913844793449352], [3, 2, 1, 1, 2, 4, -10.942015670416048], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728], [3, 1, 2, 1, 4, -9.907941902885508], [3, 1, 1, 2, 4, -9.956732067054942], [3, 0, 0, 1, 4, -10.062092582712767], [3, 0, 2, 1, 4, -10.062092582712767]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 9)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 0, 2, 1, 2, 4, -10.536550562307884], [3, 0, 0, 0, 1, 4, -10.641911077965709], [3, 0, 0, 1, 1, 4, -10.913844793449352], [3, 2, 1, 1, 2, 4, -10.942015670416048], [3, 0, 0, 2, 1, 4, -11.047376186073874], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728], [3, 1, 2, 1, 4, -9.907941902885508], [3, 1, 1, 2, 4, -9.956732067054942], [3, 0, 0, 1, 4, -10.062092582712767], [3, 0, 2, 1, 4, -10.062092582712767], [3, 2, 1, 1, 4, -10.467557690820932]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 10)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 0, 2, 1, 2, 4, -10.536550562307884], [3, 0, 0, 0, 1, 4, -10.641911077965709], [3, 0, 0, 1, 1, 4, -10.913844793449352], [3, 2, 1, 1, 2, 4, -10.942015670416048], [3, 0, 0, 2, 1, 4, -11.047376186073874], [3, 2, 0, 1, 2, 4, -11.096166350243307], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728], [3, 1, 2, 1, 4, -9.907941902885508], [3, 1, 1, 2, 4, -9.956732067054942], [3, 0, 0, 1, 4, -10.062092582712767], [3, 0, 2, 1, 4, -10.062092582712767], [3, 2, 1, 1, 4, -10.467557690820932], [3, 0, 1, 1, 4, -10.62170837064819]])
    True
    >>> top_k_result = top_k_viterbi(State_File, Symbol_File, Query_File, 20)
    >>> check_paths_match(top_k_result, [[3, 0, 0, 1, 2, 4, -9.843403381747937], [3, 0, 0, 0, 2, 4, -10.131085454199718], [3, 0, 0, 0, 0, 4, -10.20007832568667], [3, 1, 2, 1, 2, 4, -10.382399882480625], [3, 0, 2, 1, 2, 4, -10.536550562307884], [3, 0, 0, 0, 1, 4, -10.641911077965709], [3, 0, 0, 1, 1, 4, -10.913844793449352], [3, 2, 1, 1, 2, 4, -10.942015670416048], [3, 0, 0, 2, 1, 4, -11.047376186073874], [3, 2, 0, 1, 2, 4, -11.096166350243307], [3, 0, 1, 1, 2, 4, -11.096166350243307], [3, 2, 0, 0, 2, 4, -11.383848422695086], [3, 2, 0, 0, 0, 4, -11.452841294182038], [3, 1, 2, 1, 1, 4, -11.452841294182038], [3, 1, 1, 1, 2, 4, -11.50163145835147], [3, 2, 1, 2, 1, 4, -11.58637268680656], [3, 0, 2, 1, 1, 4, -11.606991974009297], [3, 2, 2, 1, 2, 4, -11.635162850975993], [3, 0, 1, 2, 1, 4, -11.74052336663382], [3, 1, 0, 1, 2, 4, -11.78931353080325], [3, 2, 1, 2, 4, -9.397116279119517], [3, 0, 0, 2, 4, -9.551266958946776], [3, 0, 1, 2, 4, -9.551266958946776], [3, 0, 0, 0, 4, -9.620259830433728], [3, 1, 2, 1, 4, -9.907941902885508], [3, 1, 1, 2, 4, -9.956732067054942], [3, 0, 0, 1, 4, -10.062092582712767], [3, 0, 2, 1, 4, -10.062092582712767], [3, 2, 1, 1, 4, -10.467557690820932], [3, 0, 1, 1, 4, -10.62170837064819], [3, 1, 2, 2, 4, -10.649879247614885], [3, 2, 0, 2, 4, -10.804029927442144], [3, 0, 2, 2, 4, -10.804029927442144], [3, 2, 0, 0, 4, -10.873022798929096], [3, 1, 2, 0, 4, -10.873022798929096], [3, 0, 2, 0, 4, -11.027173478756353], [3, 1, 1, 1, 4, -11.027173478756355], [3, 2, 2, 1, 4, -11.160704871380876], [3, 2, 0, 1, 4, -11.314855551208135], [3, 1, 0, 2, 4, -11.497177108002088]])
    True
    '''
    pass

def test_correctness():
    '''
    >>> State_File ='./dev_set/State_File'
    >>> Symbol_File='./dev_set/Symbol_File'
    >>> Query_File ='./dev_set/Query_File'
    >>> labels_file ='./dev_set/Query_Label'
    >>> viterbi_result = viterbi_algorithm(State_File, Symbol_File, Query_File)
    >>> check_labels_match(viterbi_result, labels_file)
    (1064, 134)
    '''
    pass

# Advanced decoding
def test_4():
    '''
    >>> State_File ='./dev_set/State_File'
    >>> Symbol_File='./dev_set/Symbol_File'
    >>> Query_File ='./dev_set/Query_File'
    >>> labels_file ='./dev_set/Query_Label'
    >>> viterbi_result = advanced_decoding(State_File, Symbol_File, Query_File)
    >>> right, wrong = check_labels_match(viterbi_result, labels_file)
    >>> check_margin(right, wrong)
    True
    '''
    pass

if __name__ == '__main__':
    import doctest
    doctest.testmod()
